from settings import *
from numba.core import types
from numba.typed import Dict
from numba import int64
import pygame

# Пустое место на карте
_ = False

# Стандартная карта
small_map = [
    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
    [2, _, _, _, _, _, _, _, _, _, _, 2],
    [2, _, _, _, _, _, _, _, _, _, _, 2],
    [2, _, _, _, _, _, _, _, _, _, _, 2],
    [2, _, _, _, _, _, _, _, _, _, _, 2],
    [2, _, _, _, _, _, _, _, _, _, _, 2],
    [2, _, _, _, _, _, _, _, _, _, _, 2],
    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
]

matrix_map = [
    [1, 4, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 2, 1, 1, 4, 1, 1, 1, 1, 1, 1],
    [1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 4],
    [1, 1, 1, 1, 1, 1, 4, 1, 1, 1, _, _, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, _, 1],
    [1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, _, 1],
    [1, _, _, 2, 2, 2, _, _, 1, 1, 1, 1, 1, 4, 1, _, _, 1, 1, 1, _, 1, _, 1],
    [1, _, 2, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, _, 4],
    [4, _, _, _, _, _, _, 2, _, _, _, _, _, _, _, _, _, _, _, 1, 1, 1, _, 2],
    [1, _, 2, 2, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 2],
    [1, _, _, _, 1, _, 1, _, _, _, 3, 3, 3, _, _, _, _, _, _, _, _, _, _, 4],
    [2, _, _, _, _, 2, _, _, _, _, _, _, _, _, _, _, _, 3, _, 3, _, _, _, 1],
    [1, _, _, 2, _, _, _, 2, _, _, _, _, 3, _, _, _, _, 3, _, 3, _, _, _, 1],
    [2, _, _, _, 2, 3, 2, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
    [1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3, _, _, _, 3, _, _, 1],
    [1, _, _, _, _, _, _, 3, _, _, _, 3, _, _, _, _, _, 3, 3, 3, _, _, _, 1],
    [1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
    [1, 1, 1, 2, 1, 1, 1, 4, 1, 1, 2, 1, 4, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1]
]

# Большая карта, world_scale показывает во сколько раз сторона этой карты больше стандартной (12x8)
big_map = []
for i in range(8 * world_scale):
    if i == 0 or i == 8 * world_scale - 1:
        big_map.append([1] * 12 * world_scale)
    else:
        big_map.append([1] + [_] * (12 * world_scale - 2) + [1])

map_width = len(matrix_map[0]) * tile_size
map_height = len(matrix_map) * tile_size

world_map = Dict.empty(key_type=types.UniTuple(int64, 2), value_type=int64)  # Словарь стен
mini_map = set()  # Множество координат стен для мини-карты
collision_walls = []  # Список стен для просчёта столкновений через pygame
for j, row in enumerate(matrix_map):  # Чтобы поставить другую карту, нужно тут matrix_map заменить
    for i, el in enumerate(row):
        if el:
            collision_walls.append(pygame.Rect(i * tile_size, j * tile_size, tile_size, tile_size))
            mini_map.add((i * mini_tile, j * mini_tile))
            world_map[(i * tile_size, j * tile_size)] = el
